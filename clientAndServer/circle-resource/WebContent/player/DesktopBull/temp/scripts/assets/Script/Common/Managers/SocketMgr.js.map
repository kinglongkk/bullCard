{"version":3,"sources":["assets\\Script\\Common\\Managers\\SocketMgr.js"],"names":["NetServer","require","socketMgr","cc","Class","_socketCenter","_dict_shortEvents","_dict_longEvents","_dict_pauseInfo","_list_sendFail","_isHasBreak","_heartIntervalID","_timeOutID1","_dict_recvNetSpecial","properties","ctor","connectSocket","callFunc","host","port","sys","isNative","GG","webHandler","getLocalHost","indexOf","substring","window","wsPort","url","msgReceived","receiveMsg","bind","self","onOpen","_whenOpen","onClose","_whenClose","_connect","netData","i","length","SendMsg","netType","msgDict","topTouchLayer","closeNetRequest","_cancelTimeOutCheck","_isLimit","getGameType","G_TYPE","gameModule","platform","exitHome","loginSocket","_startTimeOutCheck","connect","_addHeartInfo","getIsConnected","Boolean","isConnected","getServerTime","Date","getTime","hasOwnProperty","msg","NetBean","key","push","_autoRegisterListenerFunc","send","NetType","s_enterHouse","registerLong","r_enterHouseReturn","recvData","gameMain","find","active","getGameState","webGameState","pause","_savePauseInfo","isOk","_checkCode","_globalNetType","getIsLoading","isStop","_setLoadingNetData","isContinue","cancelLong","cancelAllLongListen","getOffSeconds","startTime","endTime","Math","max","floor","G_DATA","isNumber","clearInterval","heartLastTime","setInterval","now","sendHeart","tip","code","serverCodeType","success","serverErr1","tipsMgr","showConfirmTip_ONE","r_mineHaveGrab","dataObj","G_OBJ","data_nbSelf","balance","player","usableBalance","getPlayer","setPlayerGold","r_nbSelf","r_bull100_reStartGame","curMgr","updateEnterHomeData","homeData","getInHomeData","net_resetHomeData","setInHomeData","r_grab_reStartGame","r_grabEnd","setBettingEndInfo","isNaN","getMyselfComp","setGoldValue","r_idleTimeOut","r_passiveOut","parsePauseInfo","refreshHome","net_idleTimeOut","net_passiveOut","time","setTimeout","showReconnect","showNetRequest","clearTimeout","setTimeOutLimit","isLimit","module","exports"],"mappings":"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","file":"unknown","sourcesContent":["//WebSocket 状态判定   ===》 WebSocket.readyState\r\n//OPEN      连接已开启并准备好进行通信。\r\n//CLOSING  连接正在关闭的过程中。\r\n//CLOSED    连接已经关闭，或者连接无法建立。\r\n//CONNECTING 连接还没开启。\r\n\r\n//webSocket  管理器\r\nvar NetServer = require('SocketCenter');\r\nvar socketMgr = cc.Class({\r\n    //extends: cc.Component,\r\n    _socketCenter : null,                                   //当前使用的socket对象\r\n    _dict_shortEvents : null,                              //短对接的事件，一般是主动的请求\r\n    _dict_longEvents : null,                               //长对接的事件，被动接收的事件\r\n    _dict_pauseInfo : null,                                //暂停时候保存下来的信息\r\n    _list_sendFail : null,                                 //发送请求失败的协议\r\n    _isHasBreak : null,                                    //是否已经端过网络\r\n\r\n    _heartIntervalID : null,                               //心跳的循环ID\r\n    _timeOutID1 : null,                                     //请求超时ID\r\n    _dict_recvNetSpecial : null,                           //接收到异常处理信息\r\n    properties: {\r\n\r\n    },\r\n\r\n    // use this for initialization\r\n    ctor: function () {\r\n        //GG.socketMgr = this;\r\n\r\n        this._dict_shortEvents = {};\r\n        this._dict_longEvents = {};\r\n        this._dict_recvNetSpecial = {};\r\n        this._isHasBreak = false;\r\n    },\r\n\r\n    //增加socket链接\r\n    connectSocket : function (callFunc) {\r\n        if(this._socketCenter) return;\r\n        //新建一个socket链接\r\n        var host, port;\r\n        if(cc.sys.isNative){\r\n            host = '192.168.0.100/player/';\r\n            port = 8888;//默认端口\r\n        }else{\r\n            host = GG.webHandler.getLocalHost();\r\n        }\r\n        if (host.indexOf(\":\") > -1)host = host.substring(0, host.indexOf(\":\"));\r\n        if(host == \"\")host=\"localhost\";\r\n        if(window.wsPort) port = window.wsPort;\r\n        var url = \"ws://\"+host+\":\"+port+\"/ws\";\r\n\r\n        this._socketCenter = new NetServer(url, null, false);\r\n        this._socketCenter.msgReceived = this.receiveMsg.bind(this);\r\n        var self = this;\r\n        this._socketCenter.onOpen = function () {\r\n            self._whenOpen(callFunc);\r\n        }\r\n        this._socketCenter.onClose = function () {\r\n            self._whenClose();\r\n        }\r\n        this._connect();\r\n    },\r\n\r\n    _whenOpen : function (callFunc) {\r\n        if(this._list_sendFail){\r\n            var netData;\r\n            for(var i = 0; i < this._list_sendFail.length; i ++){\r\n                netData = this._list_sendFail[i]\r\n                this.SendMsg(netData.netType, netData.msgDict, netData.callFunc);\r\n            }\r\n        }\r\n        this._list_sendFail = null;\r\n        if(this._isHasBreak) {\r\n            //如果已经断过链接，则重连的时候需要返回房间\r\n            GG.topTouchLayer.closeNetRequest();\r\n            this._cancelTimeOutCheck();\r\n            this._isHasBreak = false;\r\n            if (!this._isLimit) if(GG.getGameType() != G_TYPE.gameModule.platform) GG.exitHome();\r\n        }\r\n        if (!this._isLimit) GG.loginSocket();\r\n        this._isLimit = false;\r\n\r\n        if(callFunc) {\r\n            callFunc(true);\r\n            callFunc = null;\r\n        }\r\n    },\r\n    _whenClose : function () {\r\n        this._connect();\r\n        this._isHasBreak = true;\r\n        if (this._isLimit) this._startTimeOutCheck();\r\n    },\r\n\r\n    _connect : function () {\r\n        if(this._socketCenter) {\r\n            this._socketCenter.connect();\r\n            this._addHeartInfo();\r\n        }\r\n    },\r\n\r\n    getIsConnected : function () {\r\n        return Boolean(this._socketCenter && this._socketCenter.isConnected())\r\n    },\r\n\r\n    getServerTime : function () {\r\n        if(this._socketCenter) return this._socketCenter.getServerTime()\r\n        else return (new Date()).getTime()\r\n    },\r\n\r\n    //发送数据\r\n    SendMsg : function(netType, msgDict, callFunc) {\r\n        if(this._dict_shortEvents.hasOwnProperty(netType)) return;\r\n\r\n        var msg;\r\n        if(NetBean[netType]){\r\n            msg = new NetBean[netType]();\r\n            for(var key in msgDict){\r\n                msg[key] = msgDict[key];\r\n            }\r\n            // if(callFunc) this._dict_shortEvents[netType] = callFunc;\r\n        }else {\r\n            // console.log('no this nettype on server==='+netType)\r\n            if(!this._list_sendFail) this._list_sendFail = [];\r\n            this._list_sendFail.push({\r\n                netType : netType,\r\n                msgDict : msgDict,\r\n                callFunc : callFunc\r\n            });\r\n            return;\r\n        }\r\n        if(callFunc) this._autoRegisterListenerFunc(netType, callFunc);\r\n        //console.log('发送的数据是')\r\n        //console.log(msg)\r\n        this._socketCenter.send(netType, msg);\r\n    },\r\n    _autoRegisterListenerFunc : function (netType, callFunc) {\r\n        switch (netType){\r\n            case NetType.s_enterHouse:\r\n                this.registerLong(NetType.r_enterHouseReturn, callFunc);\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    },\r\n\r\n    //接受数据\r\n    receiveMsg : function(netType, recvData) {\r\n        //console.log('接受数据:: '+netType)\r\n        //console.log(recvData)\r\n        //console.log(recvData.tip.tip)\r\n        var gameMain = cc.find('Canvas');\r\n        //游戏已经关闭，不需要消息\r\n        if(!gameMain || !gameMain.active) return true;\r\n\r\n        if(GG.getGameState() == G_TYPE.webGameState.pause){\r\n            //游戏暂停了\r\n            this._savePauseInfo(netType, recvData);\r\n            return false;\r\n        }\r\n\r\n        //该功能函数没有完善，只会返回true\r\n        var isOk = this._checkCode(recvData);\r\n        if(!isOk){\r\n            // console.log('get server data fail'+recvData.tip.tip)\r\n            return false;\r\n        }\r\n        //需要全局接收消息的协议\r\n        this._globalNetType(netType, recvData);\r\n        //加载场景中对某些协议进行处理\r\n        if(GG.getIsLoading()) {\r\n            var isStop = this._setLoadingNetData(netType, recvData);\r\n            if(isStop) return;\r\n        }\r\n\r\n\r\n        var isContinue = true;\r\n        if(this._dict_shortEvents && this._dict_shortEvents[netType]){\r\n            //主动请求的消息\r\n            this._dict_shortEvents[netType](recvData);\r\n            delete this._dict_shortEvents[netType];\r\n            isContinue = false;\r\n        }else if(this._dict_longEvents && this._dict_longEvents[netType]){\r\n            //\r\n            this._dict_longEvents[netType](recvData);\r\n            isContinue = false;\r\n        }\r\n        return isContinue\r\n    },\r\n\r\n    //注册长监听事件\r\n    registerLong : function (netType, callFunc) {\r\n        //if(this._dict_longEvents.hasOwnProperty(netType)) return null;\r\n        this._dict_longEvents[netType] = callFunc;\r\n    },\r\n    //取消某个长监听\r\n    cancelLong : function (netType) {\r\n        delete this._dict_longEvents[netType];\r\n    },\r\n    //取消所有长监听\r\n    cancelAllLongListen : function () {\r\n        for(var key in this._dict_longEvents){\r\n            delete this._dict_longEvents[key]\r\n        }\r\n        for(var key in this._dict_shortEvents){\r\n            delete this._dict_shortEvents[key]\r\n        }\r\n    },\r\n\r\n    //================================\r\n\r\n    //获取两个时间戳的间隔\r\n    getOffSeconds : function (startTime, endTime) {\r\n        return Math.max(Math.floor((endTime - startTime) * 0.001), 0);\r\n    },\r\n\r\n    //添加心跳\r\n    _addHeartInfo : function () {\r\n        if(G_DATA.isNumber(this._heartIntervalID)){\r\n            clearInterval(this._heartIntervalID);\r\n            this._heartIntervalID = null;\r\n        }\r\n        var heartLastTime = new Date().getTime();\r\n        this._heartIntervalID = setInterval(function () {\r\n            var now = new Date().getTime();\r\n            if(now - heartLastTime >= 3500){//心跳连接至少每3.5秒一次\r\n                if(this._socketCenter && this._socketCenter.isConnected()) this._socketCenter.sendHeart();\r\n                heartLastTime = new Date().getTime();\r\n            }\r\n        }.bind(this), 500, null);\r\n    },\r\n\r\n    //检查是否是可用信息\r\n    _checkCode : function (recvData) {\r\n        if(!recvData.tip) return true;\r\n        switch (recvData.tip.code){\r\n            case G_TYPE.serverCodeType.success:\r\n                //success\r\n                break\r\n            case G_TYPE.serverCodeType.serverErr1:\r\n                //服务器忙\r\n                GG.tipsMgr.showConfirmTip_ONE(recvData.tip.tip);\r\n                /*, function () {\r\n                 GG.exitHome();\r\n                 }*/\r\n                return false;\r\n            default:\r\n                return true\r\n        }\r\n        return true;\r\n    },\r\n\r\n    //通过某些协议刷新玩家金币消息\r\n    _globalNetType : function (netType, recvData) {\r\n        switch (netType){\r\n            case NetType.r_mineHaveGrab:\r\n                var tip = recvData.tip;\r\n                if(tip.code != G_TYPE.serverCodeType.success) {\r\n                    return;\r\n                }\r\n                var dataObj = G_OBJ.data_nbSelf();\r\n                dataObj.balance = recvData.player.balance;\r\n                dataObj.usableBalance = recvData.usableBalance;\r\n                GG.getPlayer().setPlayerGold(dataObj);\r\n                //GG.Listener.dispatchEventEX(G_TYPE.globalListener.playerGold, dataObj);\r\n                break\r\n            case NetType.r_nbSelf:\r\n                var tip = recvData.tip;\r\n                if(!tip || tip.code == G_TYPE.serverCodeType.success) {\r\n                    //接收成功\r\n                    var dataObj = G_OBJ.data_nbSelf();\r\n                    dataObj.balance = recvData.balance;\r\n                    dataObj.usableBalance = recvData.usableBalance;\r\n                    GG.getPlayer().setPlayerGold(dataObj);\r\n                }\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    },\r\n\r\n    //拦截场景加载中途传入的数据\r\n    _setLoadingNetData : function (netType, recvData) {\r\n\r\n        switch (netType){\r\n            case NetType.r_bull100_reStartGame:\r\n                //刷新进房信息_百人\r\n                GG.curMgr.updateEnterHomeData(recvData);\r\n\r\n                var homeData = GG.getPlayer().getInHomeData();\r\n                if(homeData){\r\n                    homeData.net_resetHomeData = recvData;\r\n                    GG.getPlayer().setInHomeData(homeData);\r\n                }\r\n                break;\r\n            case NetType.r_grab_reStartGame:\r\n                //刷新进房信息_押宝\r\n                GG.curMgr.updateEnterHomeData(recvData);\r\n\r\n                var homeData = GG.getPlayer().getInHomeData();\r\n                if(homeData){\r\n                    homeData.net_resetHomeData = recvData;\r\n                    GG.getPlayer().setInHomeData(homeData);\r\n                }\r\n                break;\r\n            case NetType.r_enterHouseReturn:\r\n                //加载时候可以请求入房\r\n                return false\r\n            default:\r\n                break;\r\n        }\r\n        return true\r\n    },\r\n\r\n    //=====================暂停处理\r\n\r\n    //保存暂停时候接收的数据\r\n    _savePauseInfo : function (netType, recvData) {\r\n        // console.log('when game pause ::'+netType)\r\n\r\n        // if(!this._dict_pauseInfo) this._dict_pauseInfo = {};\r\n\r\n        ////记录暂停前的金币\r\n        //if(!this._goldWhenPause) {\r\n        //    if(GG.getModuleMgr().getMyselfComp) this._goldWhenPause = GG.getModuleMgr().getMyselfComp().getGoldValue();\r\n        //}\r\n        //if(netType == NetType.r_otherGrab){\r\n        //    //有人有投注行为\r\n        //    if(!this._dict_pauseInfo[netType]) this._dict_pauseInfo[netType] = [];\r\n        //    this._dict_pauseInfo[netType] = this._dict_pauseInfo[netType].concat(recvData.bets);\r\n        //}else{\r\n        //    this._dict_pauseInfo[netType] = recvData;\r\n        //    //结算后清理\r\n        //    if(netType == NetType.r_grabEnd) this._dict_pauseInfo[NetType.r_otherGrab] = null;\r\n        //}\r\n\r\n        //处理接收到的数据\r\n        if(GG.curMgr){\r\n            switch (netType){\r\n                case NetType.r_bull100_reStartGame:\r\n                    //刷新进房信息_百人\r\n                    GG.curMgr.updateEnterHomeData(recvData);\r\n                    break;\r\n                case NetType.r_grab_reStartGame:\r\n                    //刷新进房信息_押宝\r\n                    GG.curMgr.updateEnterHomeData(recvData);\r\n                    break;\r\n                case NetType.r_grabEnd:\r\n                    //刷新进房信息\r\n                    GG.curMgr.setBettingEndInfo(recvData);\r\n                    break;\r\n                case NetType.r_mineHaveGrab:\r\n                    //可能在暂停之前玩家已经有投注,则需要记录金额变化\r\n                    if(recvData.player){\r\n                        if(!isNaN(recvData.player.balance)) {\r\n                            GG.curMgr.getMyselfComp().setGoldValue(recvData.player.balance);\r\n                        }\r\n                    }\r\n                    break;\r\n                case NetType.r_idleTimeOut:\r\n                    //长时间没有做操作，已经被T\r\n                    this._dict_recvNetSpecial[NetType.r_idleTimeOut] = recvData;\r\n                    break;\r\n                case NetType.r_passiveOut:\r\n                    //登录异常\r\n                    this._dict_recvNetSpecial[NetType.r_passiveOut] = recvData;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    //当恢复游戏的时候，解析暂停时候收到的消息\r\n    parsePauseInfo : function () {\r\n        if(GG.curMgr){\r\n            GG.curMgr.refreshHome();\r\n\r\n            for(var netType in this._dict_recvNetSpecial){\r\n                switch (netType){\r\n                    case NetType.r_idleTimeOut:\r\n                        GG.curMgr.net_idleTimeOut(this._dict_recvNetSpecial[netType]);\r\n                        break\r\n                    case NetType.r_passiveOut:\r\n                        GG.curMgr.net_passiveOut(this._dict_recvNetSpecial[netType]);\r\n                        break\r\n                    default:\r\n                        break\r\n                }\r\n            }\r\n            this._dict_recvNetSpecial = {};\r\n            return\r\n        }\r\n    },\r\n\r\n    //=======================================请求延时判定\r\n\r\n    //计算网络请求时间\r\n    _startTimeOutCheck : function () {\r\n        this._cancelTimeOutCheck();\r\n        var time = 6000;\r\n        var self = this;\r\n        this._timeOutID1 = setTimeout(function () {\r\n            GG.topTouchLayer.closeNetRequest();\r\n            GG.showReconnect(function () {\r\n                self._whenClose();\r\n                GG.topTouchLayer.showNetRequest(true);\r\n            });\r\n        }, time)\r\n    },\r\n    //取消超时监听\r\n    _cancelTimeOutCheck : function () {\r\n        if(G_DATA.isNumber(this._timeOutID1)){\r\n            clearTimeout(this._timeOutID1);\r\n        }\r\n    },\r\n    //异地登陆后取消超长监听\r\n    setTimeOutLimit : function (isLimit) {\r\n        this._cancelTimeOutCheck();\r\n        this._isLimit = isLimit;\r\n    },\r\n\r\n\r\n    //是否已经连接socket\r\n    //getIsConnecting : function () {\r\n    //    return this._socketObj && this._socketObj.readyState == WebSocket.OPEN;\r\n    //},\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n\r\nmodule.exports = socketMgr;"]}