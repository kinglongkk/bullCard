{"version":3,"sources":["assets\\Script\\Objects\\Obj_countDownProgress.js"],"names":["cc","Class","extends","Component","_firstFrame","_callFunc","properties","node_progress","Node","frame_timeImage1","SpriteFrame","frame_timeImage2","label_count","Label","font_green","Font","font_orange","font_red","onLoad","_initData","getComponentInChildren","Sprite","spriteFrame","_progressBarSprite","_progressComp","getComponent","ProgressBar","showCountDown","showTime","callFunc","isNaN","node","active","children","_runTime","_interval","_speedRate","_curTime","_firstTime","Math","min","ceil","G_Config_classic","list_centerProgressTime","_secondTime","max","floor","_progressInterval","_clearLabels","progress","schedule","_let_update","dt","_setNumImg","_endSchedule","font","string","unschedule","getLeaveTime","forceEnd","onDestory"],"mappings":"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","file":"unknown","sourcesContent":["//圆形进度条，用于倒计时的显示，优化的话可做成预制体\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n    _firstFrame : null,                             //第一张圆形图片\r\n    _callFunc : null,                               //倒计时回调结束时候调用的函数\r\n    properties: {\r\n        node_progress : cc.Node,\r\n        frame_timeImage1 : cc.SpriteFrame,              //第二张圆形图片\r\n        frame_timeImage2 : cc.SpriteFrame,              //第三张圆形图片\r\n        label_count : cc.Label,                         //绿色字体\r\n        font_green : cc.Font,                           //绿色字体\r\n        font_orange : cc.Font,                          //橙色字体\r\n        font_red : cc.Font,                             //红色字体\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n    },\r\n\r\n    _initData : function () {\r\n        this._firstFrame = this.node_progress.getComponentInChildren(cc.Sprite).spriteFrame;\r\n        this._progressBarSprite = this.node_progress.getComponentInChildren(cc.Sprite);\r\n        this._progressComp = this.node_progress.getComponent(cc.ProgressBar);\r\n    },\r\n\r\n    //显示圆形进度条的倒计时\r\n    showCountDown : function (showTime, callFunc) {\r\n        if(!this._firstFrame) this._initData();\r\n        if(isNaN(showTime)) return;\r\n        this.node.active = true;\r\n        this.node_progress.children[0].active = true;\r\n        this._callFunc = callFunc;\r\n        this._runTime = 0;\r\n        this._interval = 0.97;\r\n        this._speedRate = 1;\r\n        this._curTime = showTime;\r\n        this._firstTime = Math.min(Math.ceil(this._curTime*G_Config_classic.list_centerProgressTime[0]), this._curTime-1);\r\n        this._secondTime = Math.max(Math.floor(this._curTime*G_Config_classic.list_centerProgressTime[1]), 1);\r\n        this._progressInterval = 1/this._curTime;\r\n\r\n        this._curTime += 1;\r\n        this._runTime = this._interval;\r\n        this._clearLabels();\r\n        this._progressComp.progress = 1;\r\n        this.schedule(this._let_update, 0.01);\r\n    },\r\n\r\n    //帧函数\r\n    _let_update : function (dt) {\r\n        this._progressComp.progress -= this._progressInterval*dt;\r\n        if(this._runTime >= this._interval){\r\n            this._runTime = 0;\r\n            this._setNumImg();\r\n        }else this._runTime += dt;\r\n    },\r\n    \r\n    //设置图片\r\n    _setNumImg : function () {\r\n        this._curTime -= 1;\r\n        if(this._curTime <= this._firstTime){\r\n            if(this._curTime <= this._secondTime){\r\n                //  step 3\r\n                if(this._curTime <= 0){\r\n                    //结束倒计时\r\n                    if(this._callFunc) this._callFunc();\r\n                    this._callFunc = null;\r\n                    this._endSchedule();\r\n                }else{\r\n                    this._progressBarSprite.spriteFrame = this.frame_timeImage2;\r\n                    this.label_count.font = this.font_red;\r\n                    this.label_count.string = this._curTime;\r\n                }\r\n            }else {\r\n                //  step 2\r\n                this._progressBarSprite.spriteFrame = this.frame_timeImage1;\r\n                this.label_count.font = this.font_orange;\r\n                this.label_count.string = this._curTime;\r\n            }\r\n        }else {\r\n            //  step 1\r\n            this._progressBarSprite.spriteFrame = this._firstFrame;\r\n            this.label_count.font = this.font_green;\r\n            this.label_count.string = this._curTime;\r\n        }\r\n    },\r\n\r\n    _endSchedule : function () {\r\n        this._curTime = 0;\r\n        this._progressComp.progress = 0;\r\n        this.unschedule(this._let_update);\r\n        this.node.active = false;\r\n    },\r\n\r\n    getLeaveTime : function () {\r\n        return this._curTime\r\n    },\r\n\r\n    //强制结束\r\n    forceEnd : function () {\r\n        var callFunc = this._callFunc;\r\n        this._callFunc = null;\r\n        this._curTime = 0;\r\n        this._runTime = this._interval;\r\n        return callFunc\r\n    },\r\n\r\n    _clearLabels : function () {\r\n        this.label_count.string = '';\r\n    },\r\n\r\n    onDestory : function () {\r\n        this.unschedule(this._let_update);\r\n    },\r\n\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"]}